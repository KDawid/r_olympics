---
title: "Olympics Athletes and Medals"
author: "David Kelemen"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Setup the project
```{r setup}
library(correlation)
library(skimr)
library(tidyverse)
library(performance)

theme_set(theme_light())

options(dplyr.print_max = Inf)
```

# Read the data
```{r}
olympics_data <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv')
```

# Explore the dataset
```{r}
olympics_data |>
  glimpse()

summary(olympics_data)

sort(unique(olympics_data$sex))
sort(unique(olympics_data$noc))
sort(unique(olympics_data$season))
sort(unique(olympics_data$city))
sort(unique(olympics_data$sport))
#sort(unique(olympics_data$event))
sort(unique(olympics_data$medal))


olympics_data |>
  group_by(games) |>
  slice(1)

skim(olympics_data)
```

# Number of event types of games by season
```{r}
olympics_data |>
  filter(season == "Summer") |>
  group_by(sport) |>
  summarise(unique_event_count = n_distinct(event)) |>
  filter(unique_event_count >= 3) |>
  arrange(desc(unique_event_count))

olympics_data |>
  filter(season == "Winter") |>
  group_by(sport) |>
  summarise(unique_event_count = n_distinct(event)) |>
  filter(unique_event_count >= 3) |>
  arrange(desc(unique_event_count))
```

# Sports that were only for one year
```{r}
olympics_data |>
  group_by(sport) |>
  summarise(year_count = n_distinct(year)) |>
  filter(year_count == 1)

#olympics_data |>
#  group_by(event) |>
#  summarise(year_count = n_distinct(year)) |>
#  filter(year_count == 1)
```

# Sports and events having great history
```{r}
sport_games_count <- olympics_data |>
  group_by(sport) |>
  summarise(games_count = n_distinct(games)) |>
  arrange(desc(games_count)) |>
  filter(games_count >= 20)

sport_games_count

# keep events that were present in at least 20 games
event_games_count <- olympics_data |>
  group_by(event) |>
  summarise(games_count = n_distinct(games)) |>
  arrange(desc(games_count)) |>
  filter(games_count >= 20)
data <- olympics_data |>
  filter(sport %in% sport_games_count$sport)
```

# Bar chart of number of medals per year
```{r}
medal_colors <- c("Gold" = "#ffd700", "Silver" = "#c0c0c0", "Bronze" = "#cd7f32")

for (season_value in unique(data$season)) {
  p <- data |>
    filter(season == season_value & !is.na(medal)) |>
    ggplot() +
      aes(x = factor(year), fill = factor(medal, levels = c("Gold", "Silver", "Bronze"))) +
      geom_bar(position = "stack") +
      scale_fill_manual(values = medal_colors) +
      labs(title = paste("Number of Medals Earned by Year (", season_value, " Season)", sep = ""),
           x = "Year",
           y = "Number of Medals",
           fill = "Medal Type") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      geom_text(stat = 'count', aes(label = ..count..), position = position_stack(vjust = 0.5), size = 2)
  print(p)
}
```

# Top 10 countries number of medals (gold, silver, bronze)
```{r}
data |>
  filter(!is.na(medal)) |>
  group_by(noc) |>
  summarise(Gold = sum(medal == "Gold"),
            Silver = sum(medal == "Silver"),
            Bronze = sum(medal == "Bronze"),
            total_medals = n()) |>
  arrange(desc(total_medals)) |>
  slice(1:15) |>
  select(noc, Gold, Silver, Bronze) |>
  gather(key = "medal", value = "count", -noc) |>
  ggplot() +
  aes(x = count, y = reorder(noc, count), fill = factor(medal, levels = c("Bronze", "Silver", "Gold"))) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = count), position = position_stack(vjust = 0.5), size = 2) +
  scale_fill_manual(values = medal_colors) +
  labs(title = "Number of Medals by Country (Top 10)",
       x = "Number of Medals",
       y = NULL,
       fill = "Medal Type") +
  theme_minimal()
```

# Number of Hungarian medals per year in summer season
```{r}
data |>
  filter(noc == "HUN" & season == "Summer") |>
  group_by(year, medal) |>
  summarise(count = n()) |>
  spread(medal, count, fill = 0) |>
  ggplot() +
  aes(x = year) +
  geom_line(aes(y = Gold, color = "Gold"), size = 1) +
  geom_line(aes(y = Silver, color = "Silver"), size = 1) +
  geom_line(aes(y = Bronze, color = "Bronze"), size = 1) +
  scale_color_manual(values = medal_colors) +
  labs(title = "Number of Medals by Year for Hungary (summer)",
       x = "Year",
       y = "Number of Medals",
       color = "Medal Type") +
  theme_minimal()
```

# Average age, height and weight of top 3 and others by sports
```{r}
data |>
  group_by(sex, sport) |>
  summarise(
    average_age_top3 = mean(age[!is.na(medal)], na.rm = TRUE),
    average_age_others = mean(age[is.na(medal)], na.rm = TRUE),
    diff = abs(average_age_top3 - average_age_others),
    .groups = 'drop'
  ) |>
  filter(diff > 1) |>
  arrange(desc(diff))

data |>
  group_by(sex, sport) |>
  summarise(
    average_weight_top3 = mean(weight[!is.na(medal)], na.rm = TRUE),
    average_weight_others = mean(weight[is.na(medal)], na.rm = TRUE),
    diff = abs(average_weight_top3 - average_weight_others),
    .groups = 'drop'
  ) |>
  filter(diff > 2) |>
  arrange(desc(diff))

data |>
  group_by(sex, sport) |>
  summarise(
    average_height_top3 = mean(height[!is.na(medal)], na.rm = TRUE),
    average_height_others = mean(height[is.na(medal)], na.rm = TRUE),
    diff = abs(average_height_top3 - average_height_others),
    .groups = 'drop'
  ) |>
  filter(diff > 2) |>
  arrange(desc(diff))
```

# Average age, height and weight of top 3 and others by events
```{r}
data |>
  group_by(sex, event) |>
  summarise(
    average_age_top3 = mean(age[!is.na(medal)], na.rm = TRUE),
    average_age_others = mean(age[is.na(medal)], na.rm = TRUE),
    diff = abs(average_age_top3 - average_age_others),
    .groups = 'drop'
  ) |>
  filter(diff > 8) |>
  arrange(desc(diff))

data |>
  group_by(sex, event) |>
  summarise(
    average_weight_top3 = mean(weight[!is.na(medal)], na.rm = TRUE),
    average_weight_others = mean(weight[is.na(medal)], na.rm = TRUE),
    diff = abs(average_weight_top3 - average_weight_others),
    .groups = 'drop'
  ) |>
  filter(diff > 10) |>
  arrange(desc(diff))

data |>
  group_by(sex, event) |>
  summarise(
    average_height_top3 = mean(height[!is.na(medal)], na.rm = TRUE),
    average_height_others = mean(height[is.na(medal)], na.rm = TRUE),
    diff = abs(average_height_top3 - average_height_others),
    .groups = 'drop'
  ) |>
  filter(diff > 10) |>
  arrange(desc(diff))
```

# Athletes winning medal in most different sports
```{r}
data |>
  filter(!is.na(medal)) |>
  group_by(name) |>
  summarise(unique_event_count = n_distinct(event),
            unique_sports_list = paste(sort(unique(sport)), collapse = ", ")) |>
  filter(unique_event_count >= 7) |>
  arrange(desc(unique_event_count))

data |>
  filter(name == "Carl Townsend Osburn") |>
  select(age, medal, noc, year, sport, event)


data |>
  filter(medal == "Gold") |>
  group_by(name) |>
  summarise(unique_sport_count = n_distinct(sport),
            unique_sport_list = paste(sort(unique(sport)), collapse = ", ")) |>
  filter(unique_sport_count >= 2) |>
  arrange(desc(unique_sport_count))

```

# Number of athletes by event and year of summer games
```{r}
summer_data <- data |>
  filter(season == "Summer" & year > 1950)

pivot_table <- summer_data |>
  group_by(event, year) |>
  summarise(athletes = n(), .groups = 'drop') |>
  spread(year, athletes)

pivot_table <- pivot_table |>
  mutate(total_athletes = rowSums(select(pivot_table, -event), na.rm = TRUE),
         total_years = rowSums(!is.na(select(pivot_table, -event))),
         average_athletes = rowMeans(select(pivot_table, -event), na.rm = TRUE)
         )

# Keep events where at least 250 athletes competed over 15+ years, average 20+ athletes per year
popular_games_pivot <- pivot_table |>
  filter(total_athletes >= 250 & total_years >= 15 & average_athletes >= 15)

print(popular_games_pivot |>
        select(event, total_athletes, total_years, average_athletes))

filtered_data <- summer_data |>
  semi_join(popular_games_pivot, by = "event")

```

# Check average age of winners per year
```{r}
filtered_data |>
  filter(medal == "Gold") |>
  group_by(year) |>
  summarise(avg_age = mean(age, na.rm = TRUE)) |>
  ungroup() |>
  ggplot() +
  aes(x = year, y = avg_age) +
  geom_point() +
  labs(title = 'Average Age of Winners per Year', x = NULL, y = 'Average Age') +
  theme_minimal()
```

# Check correlation of athlete data
```{r}
data |> 
    select(age, weight, height) |> 
    correlation() |> 
    summary()
```

# Predict the height of the athlete by their weight
```{r}
athlete_model <- 
  filtered_data |> 
  drop_na() |>
  lm(height ~ weight, data = _)

summary(athlete_model)

check_model(athlete_model)
```

# Predict the year of olympic games by the athlete age, weight and height
```{r}
athlete_model <- 
  filtered_data |> 
  drop_na() |>
  lm(year ~ age + weight + height, data = _)

summary(athlete_model)

check_model(athlete_model)
# residuals show that model's weak point is predicting the extremes, which seems reasonable as year is a funny dependent variable for a linear regression
```

# Hypotheses: soccer, hockey, and water polo players are in different age, height, and weight

# ANOVA
```{r}
water_polo <- "Water Polo Men's Water Polo"
soccer <- "Football Men's Football"
hockey <- "Hockey Men's Hockey"

combined_data <- filtered_data |>
  filter(event %in% c(water_polo, soccer, hockey)) |>
  select(event, height, weight, age) |>
  drop_na()

anova_height <- aov(height ~ event, data = combined_data)
summary(anova_height)

anova_weight <- aov(weight ~ event, data = combined_data)
summary(anova_weight)

anova_age <- aov(age ~ event, data = combined_data)
summary(anova_age)
```

# T-test
```{r}
water_polo_players <- filtered_data |>
  filter(event == water_polo) |>
  select(height, weight, age) |>
  drop_na()

soccer_players <- filtered_data |>
  filter(event == soccer) |>
  select(height, weight, age) |>
  drop_na()

hockey_players <- filtered_data |>
  filter(event == hockey) |>
  select(height, weight, age) |>
  drop_na()

t.test(water_polo_players$height, soccer_players$height) # >
t.test(hockey_players$height, soccer_players$height) # <
t.test(water_polo_players$height, hockey_players$height) # <

t.test(water_polo_players$weight, soccer_players$weight) # >
t.test(hockey_players$weight, soccer_players$weight) # no diff
t.test(water_polo_players$weight, hockey_players$weight) # >

t.test(water_polo_players$age, soccer_players$age) # >
t.test(hockey_players$age, soccer_players$age) # >
t.test(water_polo_players$age, hockey_players$age) # no diff



ggplot(combined_data, aes(x = event, y = height, fill = event)) +
  geom_boxplot() +
  labs(title = "Height Distribution of Water Polo and Soccer Players",
       x = NULL,
       y = "Height") +
  theme_minimal() +
  theme(legend.position = "none")

```



